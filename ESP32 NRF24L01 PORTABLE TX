#include <ArduinoJson.h>
#include <EEPROM.h>
#include "EEPROM.h"
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SPI.h>              // include libraries
#include <LoRa.h>


/*********OLED DISPLAY START*********************************************/
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
// Declaration for SSD1306 display connected using I2C
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
/**********OLED DISPLAY END****************************************************/





/******LORA START*****************************************/
//lora esp32
const int csPin = 5;          // LoRa radio chip select
const int resetPin = 4;       // LoRa radio reset
const int irqPin = 2;         // change for your board; must be a hardware interrupt pin
byte msgCount = 0;            // count of outgoing messages
byte localAddress = 0xFF;     // address of this device
byte destination = 0xBB;      // destination to send to
unsigned long previousMillisTX = 0;
/******LORA END*****************************************/



int pagesCount = 0;
int MainMenuSelect = 0;
int SubMenuSelect = 0;
int totalPages = 8;
int totalMenus = 10;
int totalSubMenus = 4;

/*********controllers gpio pins start***********/
#define nextPageButton 12
#define MainMenuButton 13
#define SubMenuButton 15
#define sendDataButton 16

#define Buzzer 17
#define joystick1 34
#define joystick2 36
#define potentiometer1 35
#define potentiometer2 39
#define joyButton 14
#define encoderButton 25
#define switch1 27
#define switch2 26
#define encoder_DT 33
#define encoder_CLK 32
///*********controllers gpio pins end***********/

/************button controllers start****************************/
int buttonState[10];
int lastButton[10];
int currentButton[10];
int debounceDelay = 10;
unsigned long previousMillis = 0;

int button1State = 0;
int button2State = 0;
int switch1State = 0;
int switch2State = 0;
int pageDown = 0;
int pageUp = 0;
int menu = 0;
int subMenu = 0;

/************button controllers end*******************************/

/************rotary encoder start*********************************/
int currentStateCLK[3];
int lastStateCLK[3];
int encoder_counter[3];
int encoder1_counter = 0;
/************rotary encoder end**********************************/

int lastButton1 = 0;
int lastButton2 = 0;


/********EEPROM memory start***********************/
int pot1_address = 1;
int pot2_address = 2;
int joy1_address = 3;
int joy2_address = 4;
int pot1Dir_address = 5;
int pot2Dir_address = 6;
int joy1Dir_address = 7;
int joy2Dir_address = 8;
int btn1Dir_address = 9;
int btn2Dir_address = 10;
int btn3Dir_address = 11;
int btn4Dir_address = 12; 
int rot1_address = 13;
int rot1Dir_address = 14;
int pageCount_address = 15;

int servo1Dir_address = 22;
int servo2Dir_address = 23;

int motor1Dir_address = 24;
int motor2Dir_address = 25;
int motor3Dir_address = 26;
int motor4Dir_address = 27;


byte pot1_value, pot2_value, joy1_value, joy2_value;
byte pot1Dir_value, pot2Dir_value, joy1Dir_value, joy2Dir_value;
byte rot1_value, rot1Dir_value;
byte btn1Dir_value,btn2Dir_value;
byte servo1Dir_value, servo2Dir_value;
byte motor1Dir_value,motor2Dir_value,motor3Dir_value,motor4Dir_value;

/***************EEPROM memory end***********/


/********LORA RECEIVE*********/
//const char* fwVersionSlave1;
int connectionStatus = 0;
int rsi, snr;
float tmp;
int humi;
int btn1Status,btn2Status,sw1Status,sw2Status;
int pot1Status,pot2Status;


void buttonsAndCotrollers(void *pvParameters);
void memorySaving();


int pot1cursor, pot2cursor, joy1cursor, joy2cursor;
int pot1_level = 0;
int pot2_level = 0;
int joy1_level = 0;
int joy2_level = 0;


String firmwareVersionMaster = "v1.1.1";

String connection; 
String btn1Dir_Type;
String btn2Dir_Type;
String pot1Dir_Type;
String pot2Dir_Type;
String joy1Dir_Type;
String joy2Dir_Type;
String rot1Dir_Type;
String servo1Dir_Type, servo2Dir_Type;
String motor1Dir_Type, motor2Dir_Type, motor3Dir_Type, motor4Dir_Type;


void setup() {

  // put your setup code here, to run once:
  Serial.begin(115200);
  EEPROM.begin(255);

//lor a_init();
memorySaving();


  Wire.begin(); // join i2c bus (address optional for master)
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  display.setTextColor(WHITE);
  display.setTextSize(1);
  display.setCursor(40, 30);
  display.println("Restarted");
  display.display();

  pinMode(nextPageButton, INPUT_PULLUP);
  pinMode(sendDataButton, INPUT_PULLUP);
  pinMode(MainMenuButton, INPUT_PULLUP);
  pinMode(SubMenuButton, INPUT_PULLUP);
  pinMode(Buzzer, OUTPUT);


  xTaskCreatePinnedToCore(
    buttonsAndCotrollers
    ,  "buttonsAndCotrollers"
    ,  1024  // Stack size
    ,  NULL
    ,  2  // Priority
    ,  NULL 
    ,  1);

  digitalWrite(Buzzer, HIGH);
  delay(100);
  digitalWrite(Buzzer, LOW);
  delay(100);
  digitalWrite(Buzzer, HIGH);
  delay(100);
  digitalWrite(Buzzer, LOW);

}



void loop() {
   //sending data to slave node lora
//  lora_send_data();
  
  onReceive(LoRa.parsePacket());
  
  oled_display();



}


void oled_display(){
connection = (connectionStatus == 0)?"Disconnected":"Connected"; 
btn1Dir_Type = (btn1Dir_value == 0)?"P":"T";
btn2Dir_Type = (btn2Dir_value == 0)?"P":"T";
pot1Dir_Type = (pot1Dir_value == 0)?"L":"R";
pot2Dir_Type = (pot2Dir_value == 0)?"L":"R";
joy1Dir_Type = (joy1Dir_value == 0)?"L":"R";
joy2Dir_Type = (joy2Dir_value == 0)?"L":"R";
rot1Dir_Type = (rot1Dir_value == 0)?"L":"R";

  servo1Dir_Type = (servo1Dir_value == 0)?"KNOB":"SWEEP";
  servo2Dir_Type = (servo2Dir_value == 0)?"KNOB":"SWEEP";
  motor1Dir_Type = (motor1Dir_value == 0)?"CLOCK":"ANTI-CLOCK";
  motor2Dir_Type = (motor2Dir_value == 0)?"CLOCK":"ANTI-CLOCK";
  motor3Dir_Type = (motor3Dir_value == 0)?"CLOCK":"ANTI-CLOCK";
  motor4Dir_Type = (motor4Dir_value == 0)?"CLOCK":"ANTI-CLOCK";
  
    if (digitalRead(nextPageButton) == LOW) {
      pagesCount++;
      if (pagesCount > totalPages) { 
        pagesCount = 0;
      }    
        digitalWrite(Buzzer, HIGH);
        delay(100);
        digitalWrite(Buzzer, LOW);
    }

   
    if (digitalRead(MainMenuButton) == LOW) {
      MainMenuSelect++;
      if (MainMenuSelect == totalMenus+1) {
        MainMenuSelect = 0;
      }
        digitalWrite(Buzzer, HIGH);
        delay(100);
        digitalWrite(Buzzer, LOW);
   }
    
    if (digitalRead(SubMenuButton) == LOW) {
      SubMenuSelect++;
      if (SubMenuSelect == totalSubMenus+1) {
        SubMenuSelect = 0;
      }
        digitalWrite(Buzzer, HIGH);
        delay(100);
        digitalWrite(Buzzer, LOW);
    }

    digitalWrite(Buzzer, LOW);


  

 
  switch(pagesCount){
  
    case 0:
            EEPROM.write(pageCount_address, 0);
            display.clearDisplay();
            display.setTextColor(WHITE);
            display.setTextSize(1);
            display.setCursor(0, 0);//COL,ROW
            display.print("DASHBOARD");
            display.setCursor(110,0);display.print(String(pagesCount) + "/" + String(totalPages));
            display.setCursor(0,12); display.print("STATUS:" + String(connection)); 
            display.setCursor(0,21); display.print("TEMP:" + String(tmp));display.setCursor(60,21);display.print("  HUMI:" + String(humi)); 
            display.setCursor(0,31); display.print("RSSI:" + String(rsi));display.setCursor(60,31);display.print("  SNR:" + String(snr)); 
            display.setCursor(0,41); display.print("B1:" + String(button1State)+"["+ String(btn1Status)+"]"); display.setCursor(60,41);display.print("| B2:" + String(button2State)+"["+ String(btn2Status)+"]"); 
            display.setCursor(0,51); display.print("S1:" + String(switch1State)+"["+ String(sw1Status)+"]"); display.setCursor(60,51);display.print("| S2:" + String(switch2State)+"["+ String(sw2Status)+"]"); 
          break;
  
    case 1:
            EEPROM.write(pageCount_address, 1);
            display.clearDisplay();
            display.setTextColor(WHITE);
            display.setTextSize(1);
            display.setCursor(0, 0);//COL,ROW
            display.println("POTENTIOMETER");
            display.setCursor(110,0);display.print(String(pagesCount) + "/" + String(totalPages));
            display.setCursor(0,10); display.print("POT1:"+String(pot1_level));display.setCursor(60,10);display.print(" ["+ String(pot1Status)+"]");
            display.setCursor(0,20); display.print("POT2:"+String(pot2_level));display.setCursor(60,20);display.print(" ["+ String(pot2Status)+"]"); 
            display.setCursor(0,30); display.print("ENC1:" + String(encoder1_counter)); 

            pot1cursor = adc_controller_cursor_position(pot1_value, pot1Dir_value, pot1_level);
            pot2cursor = adc_controller_cursor_position(pot2_value, pot2Dir_value, pot2_level);
            display.setCursor(pot1cursor,45); display.print("*");
            display.setCursor(0,45);display.print("---------------------");
            display.setCursor(pot2cursor,55); display.print("*");
            display.setCursor(0,55);display.print("---------------------");
          break;
          
    case 2:
            EEPROM.write(pageCount_address, 2);
            display.clearDisplay();
            display.setTextColor(WHITE);
            display.setTextSize(1);
            display.setCursor(0, 0);//COL,ROW
            display.println("JOYSTICKS");
            display.setCursor(110,0);display.print(String(pagesCount) + "/" + String(totalPages));
            display.setCursor(0,10); display.print("JOY1:" + String(joy1_level));display.setCursor(60,12);display.print("| JOY2:" + String(joy2_level)); 

            joy1cursor = adc_controller_cursor_position(joy1_value, joy1Dir_value, joy1_level);
            joy2cursor = adc_controller_cursor_position(joy2_value, joy2Dir_value, joy2_level);
            display.setCursor(joy1cursor,30); display.print("*");
            display.setCursor(0,30);display.print("---------------------");
            display.setCursor(joy2cursor,39); display.print("*");
            display.setCursor(0,39);display.print("---------------------");
           break;
    
    case 3:
            EEPROM.write(pageCount_address, 3);
            display.clearDisplay();
            display.setTextColor(WHITE);
            display.setTextSize(1);
            display.setCursor(0, 0);//COL,ROW
            display.println("FIRMWARE");
            display.setCursor(110,0);display.print(String(pagesCount) + "/" + String(totalPages));
           display.setCursor(0,12); display.print("Master(TX) : " + String(firmwareVersionMaster)); 
//           display.setCursor(0,22); display.print("Slave1(RX) : "); display.println(fwVersionSlave1); 
//           display.setCursor(0,32); display.print("SLave2(TX) : " + String(fwVersionSlave2)); 
           
//           display.setCursor(0,21); display.print(" POT2:" + String(pot2_value) + "  | "); display.setCursor(70,21);display.print(" BTN2:" + String(btn1Dir_value)); 
          break;
    case 4:
          EEPROM.write(pageCount_address, 4);
          potentiometer();
//          potentiometer("potentiometer", pot1_value, pot2_value, pot3_value, pot4_value, joy1_value, joy2_value, joy3_value, joy4_value,
//          pot1_address, pot2_address, pot3_address, pot4_address, joy1_address, joy2_address, joy3_address, joy4_address, 
//          180, 255);        
          break;
          
    case 5:
          EEPROM.write(pageCount_address, 5);
          controller_settings();
          break;
    case 6:
          EEPROM.write(pageCount_address, 6);
          rotary_encoder();
          break;      
    case 7:
          EEPROM.write(pageCount_address, 7); 
          servo_settings();
          break;   
    case 8:
          EEPROM.write(pageCount_address, 8);
          motor_settings();
          break;  
                  
  }
           display.display();

  EEPROM.commit(); 

}


void lora_send_data(){

  

  String SendJSONData;

  
    StaticJsonDocument<512> LORA_TX;
//DynamicJsonDocument LORA_TX(200);



//   JsonArray button = LORA_TX.createNestedArray("btn");
//    button.add(button1State);
//    button.add(button2State);
//    button.add(switch1State);
//    button.add(switch2State);       
//    JsonArray potentiometers = LORA_TX.createNestedArray("pot");
//    potentiometers.add(pot1_level);
//    potentiometers.add(pot2_level);
//    JsonArray joysticks = LORA_TX.createNestedArray("joy");
//    joysticks.add(joy1_level);
//    joysticks.add(joy2_level);
//    JsonArray rotaryEncoder = LORA_TX.createNestedArray("rot");
//    rotaryEncoder.add(encoder1_counter);
//  
////if(digitalRead(sendDataButton) == 0){
//    JsonArray servo = LORA_TX.createNestedArray("servo");
//    servo.add(servo1Dir_value);
//    servo.add(servo2Dir_value);
//    JsonArray motor = LORA_TX.createNestedArray("motor");
//    motor.add(motor1Dir_value);
//    motor.add(motor2Dir_value);
//    motor.add(motor3Dir_value);
//    motor.add(motor4Dir_value);
//    JsonArray resetDev = LORA_TX.createNestedArray("resetDev");
//    resetDev.add(motor1Dir_value);
//}


JsonArray sendData = LORA_TX.createNestedArray("TXdata");
sendData.add(button1State);//0
sendData.add(button2State);//1
sendData.add(switch1State);//2
sendData.add(switch2State);//3
sendData.add(pot1_level);//4
sendData.add(pot2_level);//5
sendData.add(joy1_level);//6
sendData.add(joy2_level);//7
sendData.add(encoder1_counter);//8
sendData.add(servo1Dir_value);//9
sendData.add(servo2Dir_value);//10
sendData.add(motor1Dir_value);//11
sendData.add(motor2Dir_value);//12
sendData.add(motor3Dir_value);//13
sendData.add(motor4Dir_value);//14

serializeJson(LORA_TX, SendJSONData);
//serializeJsonPretty(LORA_TX, SendJSONData);







  unsigned long currentMillisTX = millis();
  if (currentMillisTX - previousMillisTX >= 500) {
    previousMillisTX = currentMillisTX;
     
      Serial.println("Sending:" + SendJSONData); 
      LoRa.beginPacket();                   // start packet
      LoRa.write(destination);              // add destination address
      LoRa.write(localAddress);             // add sender address
      LoRa.write(msgCount);                 // add message ID
      LoRa.write(SendJSONData.length());        // add payload length
      LoRa.print(SendJSONData);                 // add payload
      LoRa.endPacket();                     // finish packet and send it
      msgCount++;                           // increment message ID
      }

      
 }  





void onReceive(int packetSize) {
  if (packetSize == 0) return;          // if there's no packet, return

  // read packet header bytes:
  int recipient = LoRa.read();          // recipient address
  byte sender = LoRa.read();            // sender address
  byte incomingMsgId = LoRa.read();     // incoming msg ID
  byte incomingLength = LoRa.read();    // incoming msg length

  String incoming = "";

  while (LoRa.available()) {
    incoming += (char)LoRa.read();
    connectionStatus = 1;
  }
//  Serial2.println(incoming);//UART TRANSMMIT

  if (incomingLength != incoming.length()) {   // check length for error
    Serial.println("error: message length does not match length");
    return;                             // skip rest of function
  }

  // if the recipient isn't this device or broadcast,
  if (recipient != localAddress && recipient != 0xBB) {
    Serial.println("This message is not for me.");
    return;                             // skip rest of function
  }


StaticJsonDocument<512> LORA_RX;
  DeserializationError error = deserializeJson(LORA_RX, incoming);

  // Test if parsing succeeds.
  if (error) {
    Serial.print(F("deserializeJson() failed: "));
    Serial.println(error.f_str());
    return;
  }

  
//  const char* sensor = LORA_RX["sensor"];
//  long time = LORA_RX["time"];

//  fwVersionSlave1 = LORA_RX["firmware"];
  rsi = LORA_RX["rssi"];
  snr = LORA_RX["snr"];
  tmp = LORA_RX["temp"];
  humi = LORA_RX["humi"];
  btn1Status = LORA_RX["btnState"][0];
  btn2Status = LORA_RX["btnState"][1];
  sw1Status = LORA_RX["btnState"][2];
  sw2Status = LORA_RX["btnState"][3];
  pot1Status = LORA_RX["potState"][0];
  pot2Status = LORA_RX["potState"][1];
  
  // if message is for this device, or broadcast, print details:
  Serial.print("Received from: 0x" + String(sender, HEX));
  Serial.print(", Sent to: 0x" + String(recipient, HEX));
  Serial.print(", Message ID: " + String(incomingMsgId));
  Serial.print(", Message length: " + String(incomingLength));
  Serial.print(", RSSI: " + String(LoRa.packetRssi()));
  Serial.println(", Snr: " + String(LoRa.packetSnr()));
  Serial.println("Incoming Message: " + incoming);
  Serial.println();
  
}





void memorySaving(){
  Serial.println("Memory saved");
  EEPROM.begin(255);
   
  pot1_value = EEPROM.read(pot1_address);//EEPROM.read(ADDRESS 0-255);
  pot2_value = EEPROM.read(pot2_address);//EEPROM.read(ADDRESS 0-255);
  joy1_value = EEPROM.read(joy1_address);//EEPROM.read(ADDRESS 0-255);
  joy2_value = EEPROM.read(joy2_address);//EEPROM.read(ADDRESS 0-255);

  pot1Dir_value = EEPROM.read(pot1Dir_address);//EEPROM.read(ADDRESS 0-255);
  pot2Dir_value = EEPROM.read(pot2Dir_address);//EEPROM.read(ADDRESS 0-255);
  joy1Dir_value = EEPROM.read(joy1Dir_address);//EEPROM.read(ADDRESS 0-255);
  joy2Dir_value = EEPROM.read(joy2Dir_address);//EEPROM.read(ADDRESS 0-255);
  
  btn1Dir_value = EEPROM.read(btn1Dir_address);//EEPROM.read(ADDRESS 0-255);
  btn2Dir_value = EEPROM.read(btn2Dir_address);//EEPROM.read(ADDRESS 0-255);


  rot1_value = EEPROM.read(rot1_address);//EEPROM.read(ADDRESS 0-255);
  rot1Dir_value = EEPROM.read(rot1Dir_address);//EEPROM.read(ADDRESS 0-255);
  pagesCount = EEPROM.read(pageCount_address);//EEPROM.read(ADDRESS 0-255); 


  servo1Dir_value = EEPROM.read(servo1Dir_address);//EEPROM.read(ADDRESS 0-255);
  servo2Dir_value = EEPROM.read(servo2Dir_address);//EEPROM.read(ADDRESS 0-255);

  motor1Dir_value = EEPROM.read(motor1Dir_address);//EEPROM.read(ADDRESS 0-255);
  motor2Dir_value = EEPROM.read(motor2Dir_address);//EEPROM.read(ADDRESS 0-255);
  motor3Dir_value = EEPROM.read(motor3Dir_address);//EEPROM.read(ADDRESS 0-255);
  motor4Dir_value = EEPROM.read(motor4Dir_address);//EEPROM.read(ADDRESS 0-255);



//  Serial.println("Read =  btn1:" + String(btn1Dir_value)+", btn2:" + String(btn2Dir_value)+", btn3:" + String(btn3Dir_value)+", btn4:" + String(btn4Dir_value));
//  Serial.println("Read =  joy1:" + String(joy1_value)+"["+String(joy1Dir_value)+"], joy2:" + String(joy2_value)+"["+String(joy2Dir_value)+"], joy3:" + String(joy3_value)+"["+String(joy3Dir_value)+"], joy4:" + String(joy4_value)+"["+String(joy4Dir_value)+"]");
//  Serial.println("Read =  pot1:" + String(pot1_value)+"["+String(pot1Dir_value)+"], pot2:" + String(pot2_value)+"["+String(pot2Dir_value)+"], pot3:" + String(pot3_value)+"["+String(pot3Dir_value)+"], pot4:" + String(pot4_value)+"["+String(pot4Dir_value)+"]");
//  Serial.println("Read =  servo1:" + String(servo1Dir_value)+",servo2:" + String(servo2Dir_value));
//  Serial.println("Read =  motor1:" + String(motor1Dir_value)+", motor2:" + String(motor2Dir_value)+", motor3:" + String(motor3Dir_value)+", motor4:" + String(motor4Dir_value));
//  Serial.println("Read =  rot1:" + String(rot1_value)+"["+String(rot1Dir_value)+"], rot2:" + String(rot2_value)+"["+String(rot2Dir_value)+"]");
//  Serial.println("");
//  delay(2000);
}




void lora_init(){
      Serial.println("LoRa Duplex");

  // override the default CS, reset, and IRQ pins (optional)
  LoRa.setPins(csPin, resetPin, irqPin);// set CS, reset, IRQ pin

  if (!LoRa.begin(433E6)) {             // initialize ratio at 915 MHz
    Serial.println("LoRa init failed. Check your connections.");
    while (true);                       // if failed, do nothing
  }

  Serial.println("LoRa init succeeded.");
}


void buttonsAndCotrollers(void *pvParameters){

  (void) pvParameters;
pinMode(potentiometer1, INPUT);
pinMode(potentiometer2, INPUT);
pinMode(joystick1, INPUT);
pinMode(joystick2, INPUT);

pinMode(joyButton, INPUT_PULLUP);
pinMode(encoderButton, INPUT_PULLUP);
pinMode(switch1, INPUT_PULLUP);
pinMode(switch2, INPUT_PULLUP);

pinMode(encoder_CLK,INPUT_PULLUP);
pinMode(encoder_DT,INPUT_PULLUP);




  for (;;)
  { 
    pot1_level = adc_controller_dynamic_mapping(pot1_value, pot1Dir_value, potentiometer1);
    pot2_level = adc_controller_dynamic_mapping(pot2_value, pot2Dir_value, potentiometer2);
    joy1_level = adc_controller_dynamic_mapping(joy1_value, joy1Dir_value, joystick1);
    joy2_level = adc_controller_dynamic_mapping(joy2_value, joy2Dir_value, joystick2);
  
    button1State = button_controller_status(joyButton, 1, btn1Dir_value);
    button2State = button_controller_status(encoderButton, 2, btn2Dir_value);
    switch1State = button_controller_status(switch1, 3, 0);
    switch2State = button_controller_status(switch2, 4, 0);
    encoder1_counter = rotary_encode_controller(encoder_CLK, encoder_DT, 1 , rot1_value, rot1Dir_value);

vTaskDelay(1);
  }
}


/*************POTENTIOMETERS & jOYSTICKS CONTROL TYPE AND DIRECTIOMN*******************************/
uint16_t adc_controller_dynamic_mapping(uint8_t potValue, uint8_t potDirection, uint8_t potGpioPin){ 
  uint8_t controller = 0;
  uint16_t potReadValue = analogRead(potGpioPin); 
       if(potValue == 180 & potDirection == 0){ controller = map(potReadValue, 0, 4095, 0, 180);}
  else if(potValue == 180 & potDirection == 1){ controller = map(potReadValue, 0, 4095, 180, 0);}
  else if(potValue == 255 & potDirection == 0){ controller = map(potReadValue, 0, 4095, 0, 255);}
  else if(potValue == 255 & potDirection == 1){ controller = map(potReadValue, 0, 4095, 255, 0);}
return controller;
}

/************POTENTIOMETERS & JOYSTICKS CURSOR POSITION CONTROLLER*********************************/
uint16_t adc_controller_cursor_position(uint8_t value, uint8_t directionValue, uint8_t gpioLevel){
    uint8_t cursorPosition; 
       if(value == 180 & directionValue == 0){ cursorPosition = map(gpioLevel, 180, 0, 0, 120);}
  else if(value == 180 & directionValue == 1){ cursorPosition = map(gpioLevel, 180, 0, 120, 0);}
  else if(value == 255 & directionValue == 0){ cursorPosition = map(gpioLevel, 255, 0, 0, 120);}
  else if(value == 255 & directionValue == 1){ cursorPosition = map(gpioLevel, 255, 0, 120, 0);}
return cursorPosition;
}

/***********PUSH BUTTON AND TOGGLE BUTTON CONTROLLER**********************************************/
uint16_t button_controller_status(uint8_t buttonGpioPin, uint8_t buttonIndex, uint8_t buttonType) {
  if (buttonType == 1) {
    unsigned long currentMillis = millis();
    if(currentMillis - previousMillis >= debounceDelay){
    currentButton[buttonIndex] = digitalRead(buttonGpioPin);
    if (currentButton[buttonIndex] != lastButton[buttonIndex]) {
      lastButton[buttonIndex] = currentButton[buttonIndex];
               previousMillis = currentMillis;
      
      if (lastButton[buttonIndex] == 0) {
        buttonState[buttonIndex] = (buttonState[buttonIndex] == 0) ? 1 : 0;
      }
    }
    }
  } else if (buttonType == 0) {
    buttonState[buttonIndex] = digitalRead(buttonGpioPin);
  }
  return buttonState[buttonIndex];
}


/************ROTARY ENCODER***********************************************************************/
uint16_t rotary_encode_controller(uint16_t encoderCLK, uint16_t encoderDT,uint8_t index,uint16_t rotaryValue, uint8_t rotaryDirection){
  if(rotaryDirection == 0){
  // Read the current state of CLK
    currentStateCLK[index] = digitalRead(encoderCLK);  
      if (currentStateCLK[index] != lastStateCLK[index]  && currentStateCLK[index] == 1){
          if (digitalRead(encoderDT) != currentStateCLK[index]) {
            encoder_counter[index] --;
          } else {
            // Encoder is rotating CW so increment
            encoder_counter[index] ++;
          }
        }

  if(encoder_counter[index] < 0){
    encoder_counter[index] = 0;
  }
  if(encoder_counter[index] > rotaryValue){
    encoder_counter[index] = rotaryValue;
  }
        // Remember last CLK state
        lastStateCLK[index] = currentStateCLK[index];
  }

  else if(rotaryDirection == 1){
  // Read the current state of CLK
    currentStateCLK[index] = digitalRead(encoderCLK);  
      if (currentStateCLK[index] != lastStateCLK[index]  && currentStateCLK[index] == 1){
          if (digitalRead(encoderDT) != currentStateCLK[index]) {
            encoder_counter[index] ++;
          } else {
            // Encoder is rotating CW so increment
            encoder_counter[index] --;
          }
        }

  if(encoder_counter[index] < 0){
    encoder_counter[index] = 0;
  }
  if(encoder_counter[index] > rotaryValue){
    encoder_counter[index] = rotaryValue;
  }
        // Remember last CLK state
        lastStateCLK[index] = currentStateCLK[index];
  }

  return encoder_counter[index];
}



void potentiometer(){
          display.clearDisplay();
          display.setTextColor(WHITE);
          display.setTextSize(1);
          display.setCursor(0, 0);//COL,ROW
          display.println("POTENTIOMETER");
          display.setCursor(110,0);display.print(String(pagesCount) + "/" + String(totalPages));

          display.setCursor(0,12); display.print(" POT1:" + String(pot1_value) + "  | "); display.setCursor(70,12);display.print(" JOY1:" + String(joy1_value));   
          display.setCursor(0,21); display.print(" POT2:" + String(pot2_value) + "  | "); display.setCursor(70,21);display.print(" JOY2:" + String(joy2_value)); 
          
            switch(MainMenuSelect){
            case 0:
                  display.setCursor(0,55);display.print("Press To Select Menu");
                  break;       
            case 1:
                  display.setCursor(0,12); display.print(">POT1:" + String(pot1_value));
                  switch(SubMenuSelect){
                         case 0:
                                display.setCursor(30,55);display.print("  180  255");
                                break;
                         case 1:
                                EEPROM.write(pot1_address, 180);
                                display.setCursor(30,55);display.print(" >180  255");
                                break;
                         case 2:
                                EEPROM.write(pot1_address, 255);
                                display.setCursor(30,55);display.print("  180 >255");
                                break;     
                  }  
                  break;                   
            case 2:
                  display.setCursor(0,21); display.print(">POT2:" + String(pot2_value));
                  switch(SubMenuSelect){
                         case 0:
                                display.setCursor(30,55);display.print("  180  255");
                                break;
                         case 1:
                                EEPROM.write(pot2_address, 180);
                                display.setCursor(30,55);display.print(" >180  255");
                                break;
                         case 2:
                                EEPROM.write(pot2_address, 255);
                                display.setCursor(30,55);display.print("  180 >255");
                                break;     
                  }  
                  break;  
             case 3:
                  display.setCursor(70,12); display.print(">JOY1:" + String(joy1_value));
                  switch(SubMenuSelect){
                         case 0:
                                display.setCursor(30,55);display.print("  180  255");
                                break;
                         case 1:
                                EEPROM.write(joy1_address, 180);
                                display.setCursor(30,55);display.print(" >180  255");
                                break;
                         case 2:
                                EEPROM.write(joy1_address, 255);
                                display.setCursor(30,55);display.print("  180 >255");
                                break;     
                  }  
                  break;                   

            case 4:
                  display.setCursor(70,21); display.print(">JOY2:" + String(joy2_value));
                  switch(SubMenuSelect){
                         case 0:
                                display.setCursor(30,55);display.print("  180  255");
                                break;
                         case 1:
                                EEPROM.write(joy2_address, 180);
                                display.setCursor(30,55);display.print(" >180  255");
                                break;
                         case 2:
                                EEPROM.write(joy2_address, 255);
                                display.setCursor(30,55);display.print("  180 >255");
                                break;     
                  }  
                  break;   
             case 5:
                  MainMenuSelect = 0;
                  break;                         
                  }
        display.display(); 
     
}


void controller_settings(){
          display.clearDisplay();
          display.setTextColor(WHITE);
          display.setTextSize(1);
          display.setCursor(0, 0);//COL,ROW
          display.println("CONTROL SETTINGS");
          display.setCursor(110,0);display.print(String(pagesCount) + "/" + String(totalPages));

          display.setCursor(0,12); display.print(" POT1:" + String(pot1Dir_Type) + "  | "); display.setCursor(70,12);display.print(" JOY1:" + String(joy1Dir_Type));   
          display.setCursor(0,21); display.print(" POT2:" + String(pot2Dir_Type) + "  | "); display.setCursor(70,21);display.print(" JOY2:" + String(joy2Dir_Type)); 
          display.setCursor(0,31); display.print(" BTN1:" + String(btn1Dir_Type) + "  | "); display.setCursor(70,31);display.print(" BTN2:" + String(btn2Dir_Type)); 
  
            switch(MainMenuSelect){
            case 0:
                  display.setCursor(0,55);display.print("Press To Select Menu");
                  break;       
            case 1:
                  display.setCursor(0,12); display.print(">POT1:" + String(pot1Dir_Type));
                  switch(SubMenuSelect){
                         case 0:
                                display.setCursor(20,55);display.print("  LEFT  RIGHT");
                                break;
                         case 1:
                                EEPROM.write(pot1Dir_address, 0);
                                display.setCursor(20,55);display.print(" >LEFT  RIGHT");
                                break;
                         case 2:
                                EEPROM.write(pot1Dir_address, 1);
                                display.setCursor(20,55);display.print("  LEFT >RIGHT");
                                break;     
                  }  
                  break;                   
            case 2:
                  display.setCursor(0,21); display.print(">POT2:" + String(pot2Dir_Type));
                  switch(SubMenuSelect){
                         case 0:
                                display.setCursor(20,55);display.print("  LEFT  RIGHT");
                                break;
                         case 1:
                                EEPROM.write(pot2Dir_address, 0);
                                display.setCursor(20,55);display.print(" >LEFT  RIGHT");
                                break;
                         case 2:
                                EEPROM.write(pot2Dir_address, 1);
                                display.setCursor(20,55);display.print("  LEFT >RIGHT");
                                break;     
                  }  
                  break;    
           case 3:
                  display.setCursor(0,31); display.print(">BTN1:" + String(btn1Dir_value));
                  switch(SubMenuSelect){
                         case 0:
                                display.setCursor(20,55);display.print("  PUSH  TOGGLE");
                                break;
                         case 1:
                                EEPROM.write(btn1Dir_address, 0);
                                display.setCursor(20,55);display.print(" >PUSH  TOGGLE");
                                break;
                         case 2:
                                EEPROM.write(btn1Dir_address, 1);
                                display.setCursor(20,55);display.print("  PUSH >TOGGLE");
                                break;     
                  }  
                  break;   
             case 4:
                  display.setCursor(70,12); display.print(">JOY1:" + String(joy1Dir_Type));
                  switch(SubMenuSelect){
                         case 0:
                                display.setCursor(20,55);display.print("  LEFT  RIGHT");
                                break;
                         case 1:
                                EEPROM.write(joy1Dir_address, 0);
                                display.setCursor(20,55);display.print(" >LEFT  RIGHT");
                                break;
                         case 2:
                                EEPROM.write(joy1Dir_address, 1);
                                display.setCursor(20,55);display.print("  LEFT >RIGHT");
                                break;     
                  }  
                  break;   
            case 5:
                  display.setCursor(70,21); display.print(">JOY2:" + String(joy2Dir_Type));
                  switch(SubMenuSelect){
                         case 0:
                                display.setCursor(20,55);display.print("  LEFT  RIGHT");
                                break;
                         case 1:
                                EEPROM.write(joy2Dir_address, 0);
                                display.setCursor(20,55);display.print(" >LEFT  RIGHT");
                                break;
                         case 2:
                                EEPROM.write(joy2Dir_address, 1);
                                display.setCursor(20,55);display.print("  LEFT >RIGHT");
                                break;     
                  }  
                  break;  
                
            case 6:
                  display.setCursor(70,31); display.print(">BTN2:" + String(btn2Dir_value));
                  switch(SubMenuSelect){
                         case 0:
                                display.setCursor(20,55);display.print("  PUSH  TOGGLE");
                                break;
                         case 1:
                                EEPROM.write(btn2Dir_address, 0);
                                display.setCursor(20,55);display.print(" >PUSH  TOGGLE");
                                break;
                         case 2:
                                EEPROM.write(btn2Dir_address, 1);
                                display.setCursor(20,55);display.print("  PUSH >TOGGLE");
                                break;     
                  }  
                  break;
             
                 case 7:
                  MainMenuSelect = 0;
                  break;                         
                  }
        display.display(); 
     
}


void rotary_encoder(){
          display.clearDisplay();
          display.setTextColor(WHITE);
          display.setTextSize(1);
          display.setCursor(0, 0);//COL,ROW
          display.println("ROTARY ENCODER");
          display.setCursor(110,0);display.print(String(pagesCount) + "/" + String(totalPages));

          display.setCursor(0,20); display.print(" ROT_VALUE    :" + String(rot1_value));   
          display.setCursor(0,31); display.print(" ROT_DIRECTION:" + String(rot1Dir_Type)); 

            switch(MainMenuSelect){
            case 0:
                  display.setCursor(0,55);display.print("Press To Select Menu");
                  break;       
            case 1:
                  display.setCursor(0,20); display.print(">ROT_VALUE    :" + String(rot1_value));
                  switch(SubMenuSelect){
                         case 0:
                                display.setCursor(30,55);display.print("  180  255");
                                break;
                         case 1:
                                EEPROM.write(rot1_address, 180);
                                display.setCursor(30,55);display.print(" >180  255");
                                break;
                         case 2:
                                EEPROM.write(rot1_address, 255);
                                display.setCursor(30,55);display.print("  180 >255");
                                break;     
                  }  
                  break;                   


            case 2:
                  display.setCursor(0,31); display.print(">ROT_DIRECTION:" + String(rot1Dir_Type)); 
                  switch(SubMenuSelect){
                         case 0:
                                display.setCursor(20,55);display.print("  LEFT  RIGHT");
                                break;
                         case 1:
                                EEPROM.write(rot1Dir_address, 0);
                                display.setCursor(20,55);display.print(" >LEFT  RIGHT");
                                break;
                         case 2:
                                EEPROM.write(rot1Dir_address, 1);
                                display.setCursor(20,55);display.print("  LEFT >RIGHT");
                                break;     
                  }  
                  break;   
   
            case 3:
                  MainMenuSelect = 0;
                  break;                         
                  }
        display.display(); 
     
}

void page_settings(String pageName, String menu1, String menu2, String menu3, String menu4, String btn1Dir, String btn2Dir, String btn3Dir, 
String btn4Dir, String btnType1, String btnType2, int addr1, int addr2, int addr3, int addr4, int addrValue1, int addrValue2){
          display.clearDisplay();
          display.setTextColor(WHITE);
          display.setTextSize(1);
          display.setCursor(0, 0);//COL,ROW
          display.println(pageName);
          display.setCursor(110,0);display.print(String(pagesCount) + "/" + String(totalPages));
          
          display.setCursor(0,12);display.print(" "+String(menu1) + ":" + String(btn1Dir));
          display.setCursor(0,21);display.print(" "+String(menu2) + ":" + String(btn2Dir));   
          display.setCursor(0,31);display.print(" "+String(menu3) + ":" + String(btn3Dir));
          display.setCursor(0,41);display.print(" "+String(menu4) + ":" + String(btn4Dir)); 

           switch(MainMenuSelect){
            case 0:
                  display.setCursor(0,55);display.print("Please Select Menu");
                  break;          
              
          case 1:
                 display.setCursor(0,12); display.print(">"+String(menu1)+ ":" + String(btn1Dir));
                 switch(SubMenuSelect){
                     case 0:
                            display.setCursor(10,55);display.print("  "+String(btnType1));display.setCursor(55,55);display.print("  "+String(btnType2));
                            break;
                     case 1:
                            EEPROM.write(addr1, addrValue1);
                            display.setCursor(10,55);display.print(" >"+String(btnType1));display.setCursor(55,55);display.print("  "+String(btnType2));
                            break;
                     case 2:
                            EEPROM.write(addr1, addrValue2);
                            display.setCursor(10,55);display.print("  "+String(btnType1));display.setCursor(55,55);display.print(" >"+String(btnType2));
                            break;
                     case 3:
                           SubMenuSelect = 0;
                           break;           
              }  
              break;                   
        case 2:
              display.setCursor(0,21); display.print(">"+String(menu2)+ ":" + String(btn2Dir));
              switch(SubMenuSelect){
                     case 0:
                            display.setCursor(10,55);display.print("  "+String(btnType1));display.setCursor(55,55);display.print("  "+String(btnType2));
                            break;
                     case 1:
                            EEPROM.write(addr2, addrValue1);
                            display.setCursor(10,55);display.print(" >"+String(btnType1));display.setCursor(55,55);display.print("  "+String(btnType2));
                            break;
                     case 2:
                            EEPROM.write(addr2, addrValue2);
                            display.setCursor(10,55);display.print("  "+String(btnType1));display.setCursor(55,55);display.print(" >"+String(btnType2));
                            break;     
                     case 3:
                           SubMenuSelect = 0;
                           break; 
              }   
              break;  
        case 3:
              display.setCursor(0,31); display.print(">"+String(menu3)+ ":" + String(btn3Dir));
              switch(SubMenuSelect){
                     case 0:
                            display.setCursor(10,55);display.print("  "+String(btnType1));display.setCursor(55,55);display.print("  "+String(btnType2));
                            break;
                     case 1:
                            EEPROM.write(addr3, addrValue1);
                            display.setCursor(10,55);display.print(" >"+String(btnType1));display.setCursor(55,55);display.print("  "+String(btnType2));
                            break;
                     case 2:
                            EEPROM.write(addr3, addrValue2);
                            display.setCursor(10,55);display.print("  "+String(btnType1));display.setCursor(55,55);display.print(" >"+String(btnType2));
                            break;     
                     case 3:
                           SubMenuSelect = 0;
                           break; 
              }  
              break;                    
        case 4:
              display.setCursor(0,41); display.print(">"+String(menu4)+ ":" + String(btn4Dir));
              switch(SubMenuSelect){
                     case 0:
                            display.setCursor(10,55);display.print("  "+String(btnType1));display.setCursor(55,55);display.print("  "+String(btnType2));
                            break;
                     case 1:
                            EEPROM.write(addr4, addrValue1);
                            display.setCursor(10,55);display.print(" >"+String(btnType1));display.setCursor(55,55);display.print("  "+String(btnType2));
                            break;
                     case 2:
                            EEPROM.write(addr4, addrValue2);
                            display.setCursor(10,55);display.print("  "+String(btnType1));display.setCursor(55,55);display.print(" >"+String(btnType2));
                            break;     
                     case 3:
                           SubMenuSelect = 0;
                           break; 
              }   
              break;                    
                       
         case 5:
                  MainMenuSelect = 0;
                  break;   
              } 
        display.display();        
}


void servo_settings(){
          display.clearDisplay();
          display.setTextColor(WHITE);
          display.setTextSize(1);
          display.setCursor(0, 0);//COL,ROW
          display.println("SERVO");
          display.setCursor(110,0);display.print(String(pagesCount) + "/" + String(totalPages));
          
          display.setCursor(0,12); display.print(" SERVO1 : " + String(servo1Dir_Type));   
          display.setCursor(0,21); display.print(" SERVO2 : " + String(servo2Dir_Type)); 

           switch(MainMenuSelect){
            case 0:
                  display.setCursor(0,55);display.print("Select Servo Type");
                  break;          
              
          case 1:
                 display.setCursor(0,12); display.print(">SERVO1 : " + String(servo1Dir_Type));
                 switch(SubMenuSelect){
                     case 0:
                            display.setCursor(10,55);display.print("  KNOB   SWEEP");
                            break;
                     case 1:
                            EEPROM.write(servo1Dir_address, 0);
                            display.setCursor(10,55);display.print(" >KNOB   SWEEP");
                            break;
                     case 2:
                            EEPROM.write(servo1Dir_address, 1);
                            display.setCursor(10,55);display.print("  KNOB  >SWEEP");
                            break;
                     case 3:
                           SubMenuSelect = 0;
                           break;                                 
              }  
              break;                   
          case 2:
                 display.setCursor(0,21); display.print(">SERVO2 : " + String(servo2Dir_Type));
                 switch(SubMenuSelect){
                     case 0:
                            display.setCursor(10,55);display.print("  KNOB   SWEEP");
                            break;
                     case 1:
                            EEPROM.write(servo2Dir_address, 0);
                            display.setCursor(10,55);display.print(" >KNOB   SWEEP");
                            break;
                     case 2:
                            EEPROM.write(servo2Dir_address, 1);
                            display.setCursor(10,55);display.print("  KNOB  >SWEEP");
                            break;     
                     case 3:
                           SubMenuSelect = 0;
                           break; 
                 }  
              break;  
                
                       
         case 3:
                  MainMenuSelect = 0;
                  break;   
              }  
       display.display();        
}

void motor_settings(){
          display.clearDisplay();
          display.setTextColor(WHITE);
          display.setTextSize(1);
          display.setCursor(0, 0);//COL,ROW
          display.println("MOTOR");
          display.setCursor(110,0);display.print(String(pagesCount) + "/" + String(totalPages));
          
          display.setCursor(0,12); display.print(" MOTOR1: " + String(motor1Dir_Type));   
          display.setCursor(0,21); display.print(" MOTOR2: " + String(motor2Dir_Type)); 
          display.setCursor(0,31); display.print(" MOTOR3: " + String(motor3Dir_Type));   
          display.setCursor(0,41); display.print(" MOTOR4: " + String(motor4Dir_Type)); 
          
           switch(MainMenuSelect){
            case 0:
                  display.setCursor(0,55);display.print("Select Motor Direct..");
                  break;          
              
          case 1:
                 display.setCursor(0,12); display.print(">MOTOR1: " + String(motor1Dir_Type));
                 switch(SubMenuSelect){
                     case 0:
                            display.setCursor(0,55);display.print("  CLOCK   ANTI-CLOCK");
                            break;
                     case 1:
                            EEPROM.write(motor1Dir_address, 0);
                            display.setCursor(0,55);display.print(" >CLOCK   ANTI-CLOCK");
                            break;
                     case 2:
                            EEPROM.write(motor1Dir_address, 1);
                            display.setCursor(0,55);display.print("  CLOCK  >ANTI-CLOCK");
                            break;     
                     case 3:
                           SubMenuSelect = 0;
                           break; 
                   }  
              break; 
                                
          case 2:
                 display.setCursor(0,21); display.print(">MOTOR2: " + String(motor2Dir_Type));
                 switch(SubMenuSelect){
                     case 0:
                            display.setCursor(0,55);display.print("  CLOCK   ANTI-CLOCK");
                            break;
                     case 1:
                            EEPROM.write(motor2Dir_address, 0);
                            display.setCursor(0,55);display.print(" >CLOCK   ANTI-CLOCK");
                            break;
                     case 2:
                            EEPROM.write(motor2Dir_address, 1);
                            display.setCursor(0,55);display.print("  CLOCK  >ANTI-CLOCK");
                            break;     
                     case 3:
                           SubMenuSelect = 0;
                           break; 
                 }  
              break;  
                
            case 3:
                 display.setCursor(0,31); display.print(">MOTOR3: " + String(motor3Dir_Type));
                 switch(SubMenuSelect){
                     case 0:
                            display.setCursor(0,55);display.print("  CLOCK   ANTI-CLOCK");
                            break;
                     case 1:
                            EEPROM.write(motor3Dir_address, 0);
                            display.setCursor(0,55);display.print(" >CLOCK   ANTI-CLOCK");
                            break;
                     case 2:
                            EEPROM.write(motor3Dir_address, 1);
                            display.setCursor(0,55);display.print("  CLOCK  >ANTI-CLOCK");
                            break;     
                     case 3:
                           SubMenuSelect = 0;
                           break;    
                      }  
              break;  
              
          case 4:
                 display.setCursor(0,41); display.print(">MOTOR4: " + String(motor4Dir_Type));
                 switch(SubMenuSelect){
                     case 0:
                            display.setCursor(0,55);display.print("  CLOCK   ANTI-CLOCK");
                            break;
                     case 1:
                            EEPROM.write(motor4Dir_address, 0);
                            display.setCursor(0,55);display.print(" >CLOCK   ANTI-CLOCK");
                            break;
                     case 2:
                            EEPROM.write(motor4Dir_address, 1);
                            display.setCursor(0,55);display.print("  CLOCK  >ANTI-CLOCK");
                            break;     
                     case 3:
                           SubMenuSelect = 0;
                           break; 
                   }  
              break;
                                 
         case 5:
                  MainMenuSelect = 0;
                  break;   
              }  
       display.display();        
}
